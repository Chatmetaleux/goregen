// Code generated by go-bindata.
// sources:
// html/home.html
// DO NOT EDIT!

package www

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x96\xcf\x6e\xe3\x36\x10\xc6\xcf\xd4\x53\x4c\x7c\xca\x02\x55\x94\xec\xa2\x40\xe1\x32\x2e\xda\xa4\x8b\xdd\x43\x36\xc5\x26\x1b\xa0\x47\x4a\x1a\x59\x44\x29\x52\x20\x47\x76\x82\xc0\xef\x5e\x90\x94\x62\x06\x89\xff\xac\x2f\x22\x67\xc4\xef\x37\x34\xf9\x8d\xcd\x4f\xae\x6f\xaf\xee\xff\xfd\xe7\x6f\x68\xa9\x53\x8b\x8c\xfb\x07\x28\xa1\x97\x97\x33\xd4\x33\x1f\x40\x51\x2f\x32\xc6\x3b\x24\x01\x55\x2b\xac\x43\xba\x9c\xfd\xb8\xff\x9c\xff\x36\xf3\x71\x92\xa4\x70\xf1\x1d\x97\xa8\x4b\xf3\xc8\x8b\x38\xcf\x18\x77\xf4\x14\x06\x8c\x44\xa9\x10\x9e\x33\xc6\x58\x69\x6c\x8d\x36\x77\xbd\xa8\xa4\x5e\xce\xe1\xe2\xd7\xfe\x11\x3e\xf5\x8f\xbf\x67\x8c\x6d\x32\xc6\x8b\x69\x11\x77\x95\x95\x3d\x2d\x42\x6c\x1c\xf2\x22\xd6\xc2\x4b\x53\x3f\xf9\x4c\x7b\xb1\xf8\x82\x4a\x19\x98\xe8\x27\xbc\x68\x2f\x42\xc6\x16\xe1\xf1\x71\x61\x56\x68\x57\x12\xd7\xbc\x68\x3f\x86\x72\x7d\x31\xbe\x2a\x4e\xd6\x3f\x18\xa7\x7a\x71\x47\x82\x70\xce\x0b\xaa\xa7\x10\x54\x4a\x38\x77\x39\x5b\x85\xd4\x6c\xf1\xfc\x7c\x16\x46\x9b\xcd\xf4\x16\x2f\xa2\x40\xaa\x73\xd5\x0a\xbb\xc4\x3d\x6a\xc9\x0b\x41\x33\x99\xef\x57\xbe\x47\xed\xa4\xd1\xef\x8a\x3e\x18\x45\x62\x19\x05\xc7\xf1\x1b\x31\x5e\x4c\x1b\xe7\x6d\x98\x9f\xe4\x79\xc6\xe8\xa9\x47\xb8\x32\xba\x91\x4b\x70\x64\x87\x8a\xc2\x31\xdd\xb6\xdd\x83\x50\x03\x42\xf8\x48\x4d\xb0\xfd\x14\x05\xc4\x9c\x69\xc2\x6d\x58\x22\x58\x74\x8e\x84\xae\x10\xa4\x06\xd3\x76\xbf\xc0\xe0\x06\xa1\xd4\x13\x34\xd6\x74\x70\x71\x0e\x64\xe0\xd3\xb9\x69\xbb\x8c\xb1\x1b\x53\xe3\x56\xed\xf5\xac\x28\xe0\xcf\x81\x4c\xde\xf9\xa8\x42\x72\x40\x2d\x42\x69\x1e\xa1\x36\x13\xac\x7a\xaa\x14\x3a\x18\x9c\xd4\xcb\x90\x6e\x8c\x52\x66\xed\x67\x55\xdc\xc8\xca\x97\xe7\x32\xc6\xbe\x95\x5f\x84\x6a\xae\xe2\x82\xb7\xdb\xf8\xaa\x41\x4c\xb4\x39\xe8\xa1\x2b\xd1\xfa\x5d\xb5\x42\x35\xf9\x88\x21\xe3\xd1\x25\x36\xc6\xa2\x4f\x90\xe7\xbc\xac\x82\xd3\xf3\x39\x68\x93\x2b\xd9\x49\x82\xd6\xa8\x1a\xbb\x0f\x19\x63\x3f\xfa\xeb\xc1\x0a\x92\x46\x7b\x14\xc9\x0e\xcf\x5e\x02\x6f\xc0\x9d\x78\x94\xdd\xd0\x85\xd7\xa0\x31\x16\x84\x86\xa1\x8f\x05\x4c\x64\x12\xff\x05\x70\x15\x24\x4e\xff\xf0\x90\x6b\xb3\xd6\x5b\xcc\x4f\x43\xa0\x36\x6b\x7d\x98\x72\x6f\xfa\xf1\x4a\xbd\x7b\x15\x5e\x53\xc8\x9f\x10\x01\x99\x1e\x56\xe3\xa2\x51\xda\xad\x25\x55\x6d\x38\xa4\x70\x8c\x11\x9c\x31\xf6\x97\x21\x32\xdd\x84\x38\x4e\xbf\x0c\x6b\x8e\x46\x7c\xd5\x84\x76\x25\xd4\x1d\x56\x87\x4f\xc3\x29\xc4\xde\xd7\x11\x96\xf8\x0b\xed\xb0\x32\xba\x86\x12\x69\x8d\xa8\x01\x45\xd5\x42\x87\xc2\x0d\xd6\x8b\x47\x03\x7f\x96\xd6\xf9\xca\x4b\x63\xd4\x9e\xfa\x1d\x09\x4b\x31\x60\x07\x0d\x6b\x49\x2d\x88\x57\xe5\xc2\x69\x23\x94\xc3\x39\xd4\xd2\xc5\xf8\x87\xcc\x37\xc6\x3c\x1f\xdb\x59\xbc\xe3\x7b\x9b\xd9\x77\x74\x72\xf4\x63\xb0\xc2\x1c\xde\xeb\x1a\x55\xb3\x9c\x6c\x1e\x3b\x51\x10\x3e\x9b\x62\x9b\x0d\xdc\xb6\xdd\xbe\x8e\x74\x13\xb6\xb4\x43\xda\x27\x53\x59\x3f\xdf\xdf\xe0\xbe\xed\xf6\xdf\x4e\x4a\x6a\xf0\x94\x96\xc6\xf7\x53\x6f\x46\x5f\x8c\xcd\xa5\x1e\xef\xc5\x4e\xe2\xd6\xd9\x29\x6f\x1b\x3d\x8e\xf6\x72\xb8\x87\x81\xa9\xcb\x53\x64\x1a\x3f\xf0\xcb\x11\x4d\x33\xf4\x3d\xda\xbc\xf4\x57\x79\x34\xce\x4e\xe6\xd6\xf3\x29\x71\x1b\xdd\x6c\xa0\x7b\x38\x02\xa9\xcc\xfa\x58\xe4\xab\x36\x90\x52\x5f\x25\x0e\x82\xef\xb4\xe8\x5d\x6b\xc8\x6d\x1d\x7c\xf0\x1b\x4e\xda\x43\x0a\x4e\xc2\xfb\xbf\xdf\xe8\xfd\xe8\x5e\xe9\x5e\xfc\x1c\x23\x3b\xa9\x49\xdf\x48\xa9\x49\x78\xf7\x4f\x38\x2f\xe2\x1f\x20\x5e\xc4\xff\x6c\xff\x07\x00\x00\xff\xff\x61\x47\x93\x60\xc4\x09\x00\x00")

func htmlHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlHomeHtml,
		"html/home.html",
	)
}

func htmlHomeHtml() (*asset, error) {
	bytes, err := htmlHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/home.html", size: 2500, mode: os.FileMode(420), modTime: time.Unix(1494348577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/home.html": htmlHomeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"home.html": &bintree{htmlHomeHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
