// Code generated by go-bindata.
// sources:
// static/html/home.html
// DO NOT EDIT!

package www

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticHtmlHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x96\xdf\x6f\xdb\x36\x10\xc7\x9f\xa5\xbf\xe2\xe2\x97\x3a\x40\x6d\x25\x2d\x06\x0c\x9e\xe2\xa1\x4b\x56\xb4\xc0\xd2\x0c\x4d\x9a\x61\x8f\x94\x74\xfa\x81\x52\x3c\x81\x3c\x59\x09\x02\xff\xef\x03\x49\xc9\x96\x91\xf8\xc7\xfc\x22\xf1\xc8\xfb\x7e\x28\x1d\xbf\x67\xc5\x67\x37\x77\xd7\x0f\xff\xfe\xfd\x27\x94\x5c\xcb\x65\x18\xdb\x0b\x48\xa1\x8a\xab\x09\xaa\x89\x0d\xa0\xc8\x96\x61\x10\xd7\xc8\x02\xd2\x52\x68\x83\x7c\x35\xf9\xf1\xf0\x79\xf6\xeb\xc4\xc6\xb9\x62\x89\xcb\xef\x58\xa0\x4a\xe8\x29\x8e\xfc\x38\x0c\x62\xc3\xcf\xee\x26\x60\x91\x48\x84\x97\x30\x08\x82\x84\x74\x86\x7a\x66\x1a\x91\x56\xaa\x58\xc0\xe5\x2f\xcd\x13\x7c\x6c\x9e\x7e\x0b\x83\x60\x1d\x06\x71\x34\x24\xc5\x26\xd5\x55\xc3\x36\x3d\x6f\x55\xca\x15\x29\x30\x6d\x62\xa3\x09\xde\xb3\x60\x9c\x9e\x7b\xc9\x95\xd0\xd0\x19\xb8\x02\x85\x1d\xfc\x83\xc9\x3d\xa5\x3f\x91\xa7\x93\xce\x2c\xa2\xe8\xe5\x65\xfe\x57\x65\x18\xd5\xa7\x2c\xd3\xeb\x75\xb4\x91\x88\x8c\x12\x8d\x29\x89\x27\xe7\x96\x1d\x74\x66\x4e\x8a\x1a\x54\x70\x05\x03\x70\x8a\x3d\x22\x80\x94\x94\x21\x89\x73\x49\xc5\xf4\x9d\x5d\xf6\xee\x3d\xa0\xcf\x5c\x6f\xf3\x51\x6b\xd2\x6f\x0a\xec\xe4\xbb\x65\x6f\x0a\xd4\x68\x8c\x28\xf0\xb8\x44\x26\x58\x58\x85\xb9\xbd\x79\x25\x93\x4a\x32\x27\x88\xb8\x65\xa3\x7d\x6c\x6a\xd0\xbf\xfa\x38\xf2\xb5\x8f\x13\xca\x9e\x6d\x4d\xca\xcb\xe5\x17\x94\x92\x60\xa8\xf6\x59\x1c\x95\x97\x6e\x46\x47\xee\xf2\x61\x49\x2b\xd4\xab\x0a\xbb\x38\x2a\x3f\xb8\xe3\x61\x8b\x6f\xcb\x18\xb3\xb6\x97\x20\xe6\x6c\xe9\x0a\xb8\x88\x23\xce\x86\x10\xa4\x52\x18\x73\x35\x59\xb9\xa9\xc9\xf2\xe5\x65\xee\xee\xd6\xeb\x61\x55\x1c\x79\x81\xb1\xce\x75\x29\x74\x81\x07\xd4\x46\x0b\x9c\xe6\x68\x7c\x58\xf9\x01\x95\xa9\x48\xbd\x29\xfa\x48\x92\x45\xe1\x05\xfb\xfb\x57\x62\x71\x34\x3c\x78\x5c\xba\xf1\xd9\x6c\x16\x06\xfc\xdc\x20\x5c\x93\xca\xab\x02\x0c\xeb\x36\x65\x57\x97\xbb\xb2\x7e\x14\xb2\x45\x70\xbf\x4a\x31\x6c\x7f\x51\x04\x7e\x8e\x72\xe7\xbe\x02\x41\xa3\x31\x2c\x54\x8a\x50\x29\xa0\xb2\x7e\x0f\xad\x69\x85\x94\xcf\x90\x6b\xaa\xe1\xf2\x02\x98\xe0\xe3\x05\x95\x75\x18\x04\xb7\x94\xe1\x56\x6d\x77\x14\x45\xf0\xa9\x65\x9a\xd5\x36\x2a\x91\x0d\x70\x89\x90\xd0\x13\x64\x34\xc0\xd2\xe7\x54\xa2\x81\xd6\x54\xaa\x70\xd3\x39\x49\x49\x9d\x1d\xa5\xfe\x41\x56\x76\x7b\x26\x0c\x82\x6f\xc9\x17\x21\xf3\x6b\x9f\xf0\xfa\x31\xbe\x2a\x10\x03\x6d\x01\xaa\xad\x13\xd4\xf6\xa9\x4a\x21\xf3\x59\x8f\x61\xb2\xe8\x04\x73\xd2\x68\x27\xd8\x72\x36\x59\x30\xbd\x58\x80\xa2\x99\xac\xea\x8a\xa1\x24\x99\x61\x7d\x1e\x06\xc1\x8f\xe6\xa6\xd5\xc2\xf5\x08\x00\xe0\xaa\xc6\xf9\x26\xf0\x0a\x5c\x8b\xa7\xaa\x6e\x6b\xb7\x0c\x72\xd2\x20\x14\xb4\x8d\xdf\xc0\x40\x66\xf1\xd3\x81\x7d\xdf\x99\xfe\x6e\x21\x37\xd4\xa9\x2d\xe6\x7f\x43\x20\xa3\x4e\x1d\xa7\x3c\x50\xd3\x1f\xa9\x37\x8f\xc2\x2e\x85\x6d\x85\x18\x98\x1a\x58\xf5\x49\xbd\xb4\xe9\x2a\x4e\x4b\x57\x24\x57\x46\x0f\x0e\x83\xe0\x0f\x62\xa6\x7a\x40\x9c\xa6\x9f\xb8\x9c\x93\x11\x5f\x15\xa3\x5e\x09\x79\x8f\xe9\xf1\x6a\x18\x89\xd8\xd8\x7d\xb8\x14\x7b\xa0\x0d\xa6\xa4\x32\x48\x90\x3b\x44\x05\x28\xd2\x12\x6a\x14\xa6\xd5\x56\xdc\x1b\xf8\x73\xa5\x8d\xdd\x79\x42\x24\x0f\xec\xdf\xb0\xd0\xec\x03\xba\x55\xd0\x55\x5c\x82\xd8\xd9\x2e\x4c\x73\x21\x0d\x2e\x20\xab\x8c\x8f\x9f\x87\xb6\x09\xce\x66\x7d\x3b\xf3\x67\xfc\x60\x33\xfb\x8e\xa6\xea\xfd\xe8\xac\xb0\x80\xb7\xba\x46\x9a\x17\x83\xcd\x7d\x27\x72\xc2\xf3\x21\xb6\x5e\xc3\x5d\x59\x1f\xea\x48\xb7\xee\x91\xf6\x48\xdb\xc9\xb1\xac\x1d\x1f\x6e\x70\xdf\xf6\xfb\x6f\x2f\x65\x6c\xf0\x31\x6d\x1c\x3f\x4c\xbd\xed\x7d\xd1\x37\x97\xac\x3f\x17\x7b\x89\x5b\x67\x8f\x79\xdb\xe8\x69\xb4\x4d\x71\x8f\x03\xc7\x2e\x1f\x23\xc7\xf1\x23\xff\x1c\xde\x34\x6d\xd3\xa0\x9e\x25\xf6\x28\xf7\xc6\xd9\xcb\xdc\x7a\x7e\x4c\xdc\x46\xd7\x6b\xa8\x1f\x4f\x40\x4a\xea\x4e\x45\xee\xb4\x81\x31\x75\x67\xe2\x28\xf8\xbe\xff\x88\x32\x5b\x07\x1f\x7d\xc3\xa3\xf6\x30\x06\x8f\xc2\x87\xdf\xaf\xf7\xbe\x77\x6f\x65\x36\x7e\xf6\x91\xbd\xd4\x51\xdf\x18\x53\x47\xe1\xfd\x7f\xe1\x71\xe4\x3f\x80\xe2\xc8\x7f\x23\xff\x17\x00\x00\xff\xff\xd4\x41\xeb\x08\x34\x0b\x00\x00")

func staticHtmlHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticHtmlHomeHtml,
		"static/html/home.html",
	)
}

func staticHtmlHomeHtml() (*asset, error) {
	bytes, err := staticHtmlHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/html/home.html", size: 2868, mode: os.FileMode(420), modTime: time.Unix(1494783529, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/html/home.html": staticHtmlHomeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"home.html": &bintree{staticHtmlHomeHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
